pg <- cardQty
n <- NULL
for (i in 1:length(cardRef)){for (j in 1:nchar(cardRef[i])){if (substr(cardRef[i],j,j)==",") {n[i] <- j}}
cardRef[i] <- sub("_", "",(substr(cardRef[i],n[i]+2,nchar(cardRef[i])-3)))
pg[i] <- as.integer(page)
}
edition <- substr(cardRef, 1,3)
rank <- as.integer(as.character(substr(cardRef, 4,nchar(cardRef))))
search <- xpathSApply(rootNode2, "//a", xmlGetAttr, 'href')
search <- search[grepl("mode=1", search)]
if (myArpNumber){
add_cartes <- as.data.frame(cbind(edition, rank, cardNames, cardQty, i, search))
}else{
add_cartes <- as.data.frame(cbind(edition, rank, cardNames, cardQty, i))
}
}
return(add_cartes)
}
## Test
print('recherche des wants.....')
wants <- read_wants(23406)
for (i in 1:nrow(wants)){
print(paste('recherche arpenteurs du want ', i, ' sur ', nrow(wants),sep=''))
url <- as.character(wants[i,6])
html <- GET(url)
content <- content(html,as="text")
rootNode <- htmlParse(content, asText=TRUE)
href <- xpathSApply(rootNode, "//td//a", xmlGetAttr, 'href')
arpenteurs <- href[grepl('arpenteurs', href)]
arpenteurs <- substr(arpenteurs, 13,nchar(arpenteurs)-1)
href <- xpathSApply(rootNode, "//td//a", xmlValue)
arpNames <- href[href!=""]
if(i==1){
ex_arpNumber <- arpenteurs
ex_arpName <- arpNames
ex_refwant <- wants$ref[i]
}else {
ex_arpNumber<- c(ex_arpNumber,arpenteurs)
ex_arpName <- c(ex_arpName,arpNames)
ex_refwant <- c(ex_refwant,wants$ref[i] )
}
}
ex_arp_offer <- as.data.frame(cbind(ex_arpNumber,ex_arpName,ex_refwant))
ex_arpenteur <- as.data.frame(cbind(unique(ex_arpNumber),unique(ex_arpName)))
names(ex_arpenteur)[1] <- 'ref_arpenteur'
names(ex_arpenteur)[2] <- 'arpenteur'
offer <- as.data.frame(table(factor(ex_arpNumber)))
names(offer)[1] <- 'ref_arpenteur'
names(offer)[2] <- 'qty'
offer <- merge(ex_arpenteur, offer)
offer <- offer[order(-offer$qty,offer$ref_arpenteur),]
offer <- mutate(offer, ref_arpenteur=as.integer(as.character(ref_arpenteur)))
###############################################################################################
####################################################### Analyse des recherches des arpenteurs
offer <- data.frame(offer,look=0)
ex_arp_look <- NULL
for (i in 1:nrow(offer)){
print(paste('recherche echanges de l arpenteur ', i, ' sur ', nrow(ex_arpenteur),sep=''))
temp <- read_wants(as.integer(as.character(offer[i,1])))
if(is.null(temp)){temp="NO WANTS"}
if(temp!="NO WANTS") {
temp <- mutate(temp, cardQty=as.integer(cardQty))
for(j in 1:nrow(temp)){
if(!any(collection[,3]==as.character(temp[j,3]))) {temp[j,4]=0}
}
temp <- temp[temp[,4]>0,]
if(nrow(temp)>0) {
ex_arp_look <- rbind(ex_arp_look, cbind(ex_arpenteur[i,1],temp))
offer[i,4] <- sum(ex_arp_look[,1]==as.integer(as.character(ex_arpenteur[i,1])))
}else{
offer[i,4] <- 0
}
}else{
offer[i,4] <- 0
}
}
View(offer)
mean
lm
show
getOption("defaultPackages")
dgamma
colSums
colSums
predict
showMethods('show')
print('show')
print(show)
show
mean
methods('mean')
getMethod('show')
showMethods('show')
getMethod("GenTable","topGOdata")
getMethod('mean')
getMethod(mean)
runApp()
library('shiny')
runApp()
setwd("~/R/magic the gathering/shiny")
runApp()
cards <<- fromJSON(cardsInfo_localFile)
shiny::runApp()
cardsInfo_localFile <- "cards.JSON"
cards <<- fromJSON(cardsInfo_localFile)
cards[[1]]
names(cards)
sets[1]
cards[sets[1]]
cards[sets[2]]
cards[sets[1]][9]
names(cards[sets[1]])
names(cards[sets[[1]])
names(cards[sets[[1]])
names(cards[sets[1])
names(cards[sets[1]])
names(cards[sets[[1]])
names(cards[sets[[1]]])
cards[sets[1]][9]
cards[sets[1]][11]
cards[[1]][11]
?row.number
?nrow
?rows
?row
row(cards[1]=='LEA')
row(cards[[1]]=='LEA')
cards[[1]]
cards[['LEA']]
cards[['ATQ']]
cards[['AT']]
sets <- 'MRD'
cards[[set(s[1])]]
cards[[sets[1])]]
cards[[sets[1]]]
cards[[sets[1]]]
i <- 1
cards[[sets[i]]]
cards[[sets[i]]][11]
cards[[sets[i]]][1]
cards[[sets[i]]][9]
cards[[sets[i]]][9][,c('name','types','cmc', 'colorIdentity', 'power','toughness')]
cards[[sets[i]]][9][,c('name','types','cmc', 'colorIdentity', 'power','toughness')]
cards[[sets[i]]][9]
temp <- cards[[sets[i]]][9]
temp[,c('name','types','cmc', 'colorIdentity', 'power','toughness')]
temp <- cards[[sets[i]]][9][1]
temp <- cards[[sets[i]]][9]
cards[[sets[i]]][9]
cards[[sets[i]]][9]$cards
names(cards[[sets[i]]][9]$cards)
cards[[sets[i]]][9]$cards[,c('name','types','cmc', 'colorIdentity', 'power','toughness')]
shiny::runApp()
shiny::runApp()
shiny::runApp()
sel <- NULL; as.data.frame(sel)
sel <- rbind(sel,cbind(sets[1],cards[[sets[1]]][9]$cards[,c('name','types','cmc', 'colorIdentity', 'power','toughness')]))
cards[[sets[1]]][9]$cards[,c('name','types','cmc', 'colorIdentity', 'power','toughness')]
cards[[sets[1]]][9]
cards[[sets[1]]]11]
cards[[sets[1]]][11]
cards[[sets[1]]]$cards
cards[[sets[1]]]$cards
cards[[sets[1]]]$cards[,c('name','types','cmc', 'colorIdentity', 'power','toughness')]
cards[[sets[2]]]$cards[,c('name','types','cmc', 'colorIdentity', 'power','toughness')]
cards[[sets[3]]]$cards[,c('name','types','cmc', 'colorIdentity', 'power','toughness')]
cards[[sets[4]]]$cards[,c('name','types','cmc', 'colorIdentity', 'power','toughness')]
cards[[sets[5]]]$cards[,c('name','types','cmc', 'colorIdentity', 'power','toughness')]
shiny::runApp()
shiny::runApp()
?grepl
shiny::runApp()
?summarize
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(test)
?grepl
shiny::runApp()
View(test)
names(tes)
names(test)
grep('W', test$colorIdentity)
grepl('W', test$colorIdentity)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(test)
shiny::runApp()
shiny::runApp()
View(test)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(test)
shiny::runApp()
summarize(group_by(selection,'set'), count(cmc))
summarize(group_by(sets,'set'), count(cmc))
sets
class(sets)
summarize(group_by(test,'set'), count(cmc))
shiny::runApp()
shiny::runApp()
View(test)
summarize(group_by(test,'set'), count(cmc))
shiny::runApp()
summarize(group_by(sel,'set'), count(cmc))
summarize(group_by(test,'set'), count(cmc))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?hist
hist(test$cmc)
shiny::runApp()
?plot
shiny::runApp()
summarize(group_by(test,'set'), count(cmc))
summarize(test, count(cmc))
summarize(test, cmc
)
summarize(group_by(test,'set'), cmc)
summarize(group_by(test,'set'), sum(cmc))
View(test)
test$set
?hist
hist(test$cmc,test$set)
test$set
plot(test$cmc)
plot(test$cmc,test$set)
plot(test$cmc,col=tes$set)
plot(test$cmc,col=test$set)
hist(test$cmc,col=test$set)
hist(test$cmc)
plot(test[test$set="ONS",]$cms)
plot(test[test$set=="ONS",]$cms)
plot(test[test$set=="ONS",]$cmc)
hist(test[test$set=="ONS",]$cmc)
hist(test[test$set=="LGN",]$cmc)
hist(test[test$set=="SCG",]$cmc)
plot(summarize(group_by(sel,'set'), count(cmc)))
plot(summarize(group_by(test,'set'), count(cmc)))
plot(summarize(group_by(test[test$set=="SCG"],'set'), count(cmc)))
plot(summarize(group_by(test[test$set=="SCG",],'set'), count(cmc)))
lines(summarize(group_by(test[test$set=="SCG"],'set'), count(cmc)))
require(ggplot2)
g <- ggplot(test, aes(cmc))
g <- g + geom_histogram()
print g
print (g)
g <- ggplot(test, aes(cmc), fill = set)
g <- g + geom_histogram()
print (g)
g <- g + geom_histogram(binwidth=500)
print (g)
print (30)
g <- ggplot(test, aes(cmc), fill = set)
g <- g + geom_histogram(binwidth=30)
print (g)
g <- ggplot(test, aes(cmc), fill = set)
g <- g + geom_histogram(binwidth=2)
print (g)
test 2 <- group_by(test,'set')
test2 <- group_by(test,'set')
summarize(test2)
summarize(test2,'cmc')
?summarize
summarise(test2,test2$cmc)
summarise(group_by(test, set), mean(cmc))
summarise(group_by(test, 'set'), mean(cmc))
summarise(group_by(test, test[,1]), mean(cmc))
summarise(group_by(test, cmc), count)
names(set)
names(test)
class(test)
summarise(mtcars, mean(disp))
summarise(group_by(mtcars, cyl), mean(disp))
?group_by
View(test)
test2 <- group_by(test,set)
summarise(test2,count(cmc))
summarise(test2,cmc)
summarise(test2,mean(cmc))
test2 <- group_by(test,test$set)
load(mtcars)
mtcars
by_cyl <- group_by(mtcars, cyl)
summarise(by_cyl, mean(disp), mean(hp))
library(dplyr)
summarise(by_cyl, mean(disp), mean(hp))
library(dplyr)
summarise(by_cyl, mean(disp), mean(hp))
summarise(by_cyl, mean(disp), mean(hp))
by_cyl <- group_by(mtcars, cyl)
summarise(by_cyl, mean(disp), mean(hp))
g <- ggplot(test, aes(cmc), fill = set)
g <- g + geom_histogram(binwidth=1)
prin(g)
print(g)
View(test)
class(test$set)
plot(cmc)
plot(test$cmc)
boxplot(test$cmc)
boxplot(test$cmc,col=set)
boxplot(test$cmc,col=test$set)
boxplot(test$cmc,cut=test$set)
boxplot(test$cmc,=tesfillt$set)
boxplot(test$cmc,fill$set)
boxplot(test$cmc,fill=test$set)
test$set
plot(test$cmc,type=l)
plot(test$cmc,type='l'')
)
plot(test$cmc,type='l')
plot(test$cmc)
boxplot(test$cmc,fill=test$set)
boxplot(test$cmc ~ test$set)
shiny::runApp()
hist(test$cmc ~ test$set)
shiny::runApp()
clas(test$power)
class(test$power)
shiny::runApp()
shiny::runApp()
shiny::runApp()
class(test$power)
as.numeric(test$power)
as.numeric(test$power[!is.na(as.numeric(test$power))])
shiny::runApp()
as.numeric(test$power[!is.na(as.numeric(test$power))])
hist(as.numeric(test$power[!is.na(as.numeric(test$power))]))
hist(as.numeric(test$power[!is.na(as.numeric(test$power)),]))
hist(as.numeric(test[!is.na(as.numeric(test$power)),]$power))
test[!is.na(as.numeric(test$power)),]
length(test[!is.na(as.numeric(test$power)),]$power)
length(tes$power)
length(test$power)
length(test[!is.na(as.numeric(test$power)),]$set)
test[!is.na(as.numeric(test$power)),]
hist(test[!is.na(as.numeric(test$power)),])
hist(test[!is.na(as.numeric(test$power)),])
class(test[!is.na(as.numeric(test$power)),])
class(test[!is.na(as.numeric(test$power)),]$)
class(test[!is.na(as.numeric(test$power)),]$power)
class(as.numeric(test[!is.na(as.numeric(test$power)),]$power))
hist(as.numeric(test[!is.na(as.numeric(test$power)),]$power))
plot(as.numeric(test[!is.na(as.numeric(test$power)),]$power) ~ test[!is.na(as.numeric(test$power)),]$set)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(test)
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(test)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?nrows
?nrow
shiny::runApp()
View(test)
shiny::runApp()
shiny::runApp()
shiny::runApp()
test$white==0
test$white==0 & test$blue==0
test[test$white==1]
test[test$white==1,]
test[test$white==1 & tes$blue==0,]
test[test$white==1 & test$blue==0,]
test[test$white==0 & test$blue==0,]
shiny::runApp()
View(test)
shiny::runApp()
shiny::runApp()
?is.null
shiny::runApp()
shiny::runApp()
View(test)
View(test)
shiny::runApp()
?plot
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
list.files()
if (!any(list.files()==editionsInfo_localFile)) download.file(editionsInfo_url, editions_localFile)
editionsInfo_localFile <- "editions.JSON"
editionsInfo_url <- "http://mtgjson.com/json/AllSetsArray.json"
editionsInfo_localFile <- "editions.JSON"
cardsInfo_url <- "http://mtgjson.com/json/AllSets.json"
cardsInfo_localFile <- "cards.JSON"
if (!any(list.files()==editionsInfo_localFile)) download.file(editionsInfo_url, editions_localFile)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(slidify)
shiny::runApp()
author('Presentation')
author      : michelg31
author      : 'michelg31'
slidify('index.Rmd')
browseURL('index.Rmd')
library('knitr')
browseURL('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
url <- 'http://mtgjson.com/sets.html'
html <- GET(url)
content <- content(html,as="text")
rootNode <- htmlParse(content, asText=TRUE)
href <- xpathSApply(rootNode, "//div[@class='downloads']/a", xmlValue)
length(href)/4
slidify('index.Rmd')
browseURL('index.html')
--- .class #id
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
shiny::runApp('~/R/magic the gathering/shiny')
<img height='560' src='/assets/img/Boxplot.png' />
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
setwd("~/R/Gitfiles/DataProduct")
shiny::runApp()
slidify('index.Rmd')
slidify('index.Rmd')
setwd("~/R/Gitfiles/DataProduct/Presentation")
slidify('index.Rmd')
slidify('index.Rmd')
slidify('index.Rmd')
browseURL('index.html')
